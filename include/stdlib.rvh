% @ implies a reference rather than a value is passed
% Variable names beginning with $ are reserved for pseudo-ops such as for, while
% Variable names beginning with _ are not stored

% {T} means any type
% {T:int}, {T} etc. can also be used to accept any int etc.


% Head of list

define hd `list:{T}` | {T} (
  []? 'empty_list'.
  [hd|_]? hd. 
)

% Tail of List

define tl `list:{T}` | {T} (
  []? [].
  [_|tl]? tl.
)


% while loop

define while `fun` `fun` | atom (
  !=0; _? 'nil'.
  @pred!=1; @fn? while @pred @fn.  
)

% for loop

define for `ident` <- `list:{_}` `fun` | atom (
  _; []; _? 'nil'.
  $i; $it; $f2?
    @$i <- hd($it);
    $f2!;
    for @$i <- tl($it) $f2.
)

define `int` to `int` | list{int:32} (
  x; y, y >= x? x to y by 1.
  x; y? x to y by -1.
)

define `int` to `int` by `int` | list{int:32} (
  a; a; _? [a].
  a; b, a>b; c, c>0? [].
  a; b, b>a; c, c<0? [].
  a; b; c? [a | a+c to b by c].
)
